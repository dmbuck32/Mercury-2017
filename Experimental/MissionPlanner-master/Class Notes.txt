1. MAVLink.cs contains a lot of information releated to seral communication and APM parameters

2. CurrentState.cs has a good bit of information related to GPS

3. GCSViews => FlightData.cs => FlightData has a call for gps data through MainV2.comPort.requestDatastream()

	a. MainV2.comPort is a type of MAVLinkInterface().
		
		- MAVLinkInterface extends MAVLink()

	b.  (MavLink.cs) public void requestDatastream(MAVLink.MAV_DATA_STREAM id, byte hzrate)

		case MAVLink.MAV_DATA_STREAM.POSITION:
                    if (packetspersecondbuild[(byte)MAVLINK_MSG_ID.GLOBAL_POSITION_INT] < DateTime.Now.AddSeconds(-2))
                        break;
                    pps = packetspersecond[(byte)MAVLINK_MSG_ID.GLOBAL_POSITION_INT];
                    if (hzratecheck(pps, hzrate))
                    {
                        return;
                    }
                    break;


            //packetspersecond[temp[5]];

            if (pps == 0 && hzrate == 0)
            {
                return;
            }

            log.InfoFormat("Request stream {0} at {1} hz", Enum.Parse(typeof(MAV_DATA_STREAM), id.ToString()), hzrate);
            getDatastream(id, hzrate);

	c. (MavLink.cs) void getDatastream(MAVLink.MAV_DATA_STREAM id, byte hzrate)

		void getDatastream(MAVLink.MAV_DATA_STREAM id, byte hzrate)
        		{
            			mavlink_request_data_stream_t req = new mavlink_request_data_stream_t();
            			req.target_system = MAV.sysid;
            			req.target_component = MAV.compid;

           		        req.req_message_rate = hzrate;
            			req.start_stop = 1; // start
            			req.req_stream_id = (byte)id; // id

            			// send each one twice.
            			generatePacket((byte)MAVLINK_MSG_ID.REQUEST_DATA_STREAM, req);
            			generatePacket((byte)MAVLINK_MSG_ID.REQUEST_DATA_STREAM, req);
        		}
	
	d. (MavLink.cs) void generatePacket(byte messageType, object indata)       

		void generatePacket(byte messageType, object indata)
        		{
            			if (!BaseStream.IsOpen)
            				{
               			 		return;
            				}

            		lock (objlock)
            	{
                byte[] data;

                data = MavlinkUtil.StructureToByteArray(indata);

                //Console.WriteLine(DateTime.Now + " PC Doing req "+ messageType + " " + this.BytesToRead);
                byte[] packet = new byte[data.Length + 6 + 2];

                packet[0] = 254;    
                packet[1] = (byte)data.Length;
                packet[2] = (byte)packetcount;

                packetcount++;

                packet[3] = 255; // this is always 255 - MYGCS
                packet[4] = (byte)MAV_COMPONENT.MAV_COMP_ID_MISSIONPLANNER;
                packet[5] = messageType;

                int i = 6;
                foreach (byte b in data)
                {
                    packet[i] = b;
                    i++;
                }

                ushort checksum = MavlinkCRC.crc_calculate(packet, packet[1] + 6);

                    checksum = MavlinkCRC.crc_accumulate(MAVLINK_MESSAGE_CRCS[messageType], checksum);

                byte ck_a = (byte)(checksum & 0xFF); ///< High byte
                byte ck_b = (byte)(checksum >> 8); ///< Low byte

                packet[i] = ck_a;
                i += 1;
                packet[i] = ck_b;
                i += 1;

                if (BaseStream.IsOpen)
                {
                    BaseStream.Write(packet, 0, i);
                    _bytesSentSubj.OnNext(i);
                }

                try
                {
                    if (logfile != null && logfile.CanWrite)
                    {
                        lock (logfile)
                        {
                            byte[] datearray = BitConverter.GetBytes((UInt64)((DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalMilliseconds * 1000));
                            Array.Reverse(datearray);
                            logfile.Write(datearray, 0, datearray.Length);
                            logfile.Write(packet, 0, i);
                        }
                    }

                }
                catch { }
                /*
                if (messageType == (byte)MAVLink.MSG_NAMES.REQUEST_DATA_STREAM)
                {
                    try
                    {
                        BinaryWriter bw = new BinaryWriter(File.OpenWrite("serialsent.raw"));
                        bw.Seek(0, SeekOrigin.End);
                        bw.Write(packet, 0, i);
                        bw.Write((byte)'\n');
                        bw.Close();
                    }
                    catch { } // been getting errors from this. people must have it open twice.
                }*/
            }
        }
